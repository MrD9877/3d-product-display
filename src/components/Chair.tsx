/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 -t public/models/chair.gltf 
*/

import * as THREE from "three";
import React, { JSX } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useCustomization } from "@/hooks/CustomisationProvider";

type GLTFResult = GLTF & {
  nodes: {
    Chair: THREE.Mesh;
    Cushion: THREE.Mesh;
    Legs1: THREE.Mesh;
    Legs2: THREE.Mesh;
  };
  materials: {
    Chair: THREE.MeshStandardMaterial;
    Cushion: THREE.MeshStandardMaterial;
    Legs: THREE.MeshStandardMaterial;
  };
};
const repeat = 12;

export function Chair(props: JSX.IntrinsicElements["group"]) {
  const context = useCustomization();

  const leatherTextureProps = useTexture({
    normalMap: "/textures/leather/Leather_Padded_003_normal.png",
    roughnessMap: "/textures/leather/Leather_Padded_003_roughness.png",
    aoMap: "/textures/leather/Leather_Padded_003_ambientOcclusion.png",
  });
  const fabricTextureProps = useTexture({
    normalMap: "/textures/fabric/Substance_Graph_Normal.jpg",
    roughnessMap: "/textures/fabric/Substance_Graph_Roughness.jpg",
    aoMap: "/textures/fabric/Substance_Graph_AmbientOcclusion.jpg",
  });

  leatherTextureProps.normalMap.repeat.set(repeat, repeat);
  leatherTextureProps.roughnessMap.repeat.set(repeat, repeat);
  leatherTextureProps.aoMap.repeat.set(repeat, repeat);

  leatherTextureProps.normalMap.wrapS = leatherTextureProps.normalMap.wrapT = THREE.MirroredRepeatWrapping;
  leatherTextureProps.roughnessMap.wrapS = leatherTextureProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  leatherTextureProps.aoMap.wrapS = leatherTextureProps.aoMap.wrapT = THREE.RepeatWrapping;

  leatherTextureProps.normalMap.needsUpdate = true;
  leatherTextureProps.roughnessMap.needsUpdate = true;
  leatherTextureProps.aoMap.needsUpdate = true;

  fabricTextureProps.normalMap.repeat.set(4, 4);
  fabricTextureProps.roughnessMap.repeat.set(4, 4);
  fabricTextureProps.aoMap.repeat.set(4, 4);

  fabricTextureProps.normalMap.wrapS = fabricTextureProps.normalMap.wrapT = THREE.MirroredRepeatWrapping;
  fabricTextureProps.roughnessMap.wrapS = fabricTextureProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  fabricTextureProps.aoMap.wrapS = fabricTextureProps.aoMap.wrapT = THREE.RepeatWrapping;

  const { nodes, materials } = useGLTF("/models/chair.gltf") as unknown as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Chair.geometry}>
        <meshStandardMaterial {...(context?.material === "leather" ? leatherTextureProps : fabricTextureProps)} color={context?.chairColor.color} />
      </mesh>
      <mesh geometry={nodes.Cushion.geometry} position={[0, 0.064, 0.045]}>
        <meshStandardMaterial {...fabricTextureProps} color={context?.cushionColor.color} />
      </mesh>
      <mesh geometry={nodes.Legs1.geometry} material={materials.Legs} visible={!context?.legs} />
      <mesh geometry={nodes.Legs2.geometry} material={materials.Legs} visible={context?.legs} />
    </group>
  );
}

useGLTF.preload("/models/chair.gltf");
